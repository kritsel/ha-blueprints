blueprint:
  name: RF single button switch - via RFLink
  domain: automation
  author: https://github.com/kritsel
  description: >
    # RF single button switch - via RFLink
    
    The RFLink integration creates a single HomeAssistant entity to represent the button of 
    an RF (Radia Frequency) switch.
    This basic behaviour allows you to switch ON or OFF a single entity (or group of entities 
    when you use HomeAssistant's `group` feature) via HomeAssistant. 
    
    
    This blueprint adds more control possibilities. 
    It allows you to associate independent actions to the ON and OFF side of a single button. 
    This essentially turns your RF single button switch - meant to control a *single* entity - 
    into a *two* button switch where the ON and OFF side of the button can each trigger 
    a completely independent (set of) action(s). 
    
    ## Prerequisites
    
    * Your RF switch MUST be integrated via the RFLink integration.
    * The RFLink configuration must include `fire_event: true` for the HomeAssistant entity that represents
    the button.
    See https://www.home-assistant.io/integrations/rflink/ for guidance.
    
    
    Examples of RF remote controls which are expected to work with this blueprint:
    * COCO/KAKU AWST-8800 (https://klikaanklikuit.nl/product/draadloze-wandschakelaar)
    
    ## More Info
    
    ℹ️ ClickOnClickOff (KlikAanKlikUit in NL) is a Dutch brand that makes smart home and wireless remote control products.

  # user provided inputs
  input:
    # entity representing the button of the RF switch
    button_entity:
      name: Button entity
      description: The entity representing the button.
      default: ''
      selector:
        entity:
          filter:
            - integration: rflink
              domain:
                - light
                - switch
                - binary_sensor
          multiple: false

    # inputs for custom actions
    action_button_on:
      name: (Optional) Button 'on' press
      description: Action to run on button 'on' press.
      default: []
      selector:
        action:
    action_button_off:
      name: (Optional) Button 'off' press
      description: Action to run on button 'off' press.
      default: []
      selector:
        action:

# Automation schema
mode: single
variables:
  # convert input tags to variables, so they can be used in templates
  button_entity: !input button_entity

triggers:
  - trigger: event
    event_type:
      # RFLink fires button_pressed events for switches/lights/binary_sensors
      - button_pressed

conditions:
  # has the event been fired for the configured selected entity?
  - condition: template
    value_template: >-
      {{trigger.event.data.entity_id in [button_entity] }}
  # and does the event contain a valid state?
  - condition: template
    value_template: >-
      {{trigger.event.data.state in ["on", "off"] }}

actions:
  - choose:
      # button
      - conditions:
          - condition: template
            value_template: >-
              {{trigger.event.data.entity_id == button_entity}}
        sequence:
          - choose:
              # 'on' click
              - conditions:
                  - condition: template
                    value_template: >-
                      {{trigger.event.data.state == "on"}}
                sequence: !input action_button_on
              # 'off' click
              - conditions:
                  - condition: template
                    value_template: >-
                      {{trigger.event.data.state == "off"}}
                sequence: !input action_button_off
